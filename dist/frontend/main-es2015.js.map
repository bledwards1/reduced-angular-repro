{"version":3,"sources":["/./$_lazy_route_resource lazy namespace object","/./src/app/question.component.html","/./src/app/api.service.ts","/./src/app/app-routing.module.ts","/./src/app/app.component.ts","/./src/app/app.module.ts","/./src/app/question.component.ts","/./src/environments/environment.ts","/./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;ACZA,ob;;;;;;;;;;;;;;;;;;ACA0C;AACO;AAGjD,IAAa,UAAU,GAAvB,MAAa,UAAU;IACnB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAG,CAAC;IAGxC,YAAY,CAAC,QAAQ;QACjB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAsC,EAAE,QAAQ,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;YAC7E,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;QACpB,CAAC,CAAC;IACN,CAAC;CACJ;;YAR6B,+DAAU;;AAD3B,UAAU;IADtB,gEAAU,EAAE;GACA,UAAU,CAStB;AATsB;;;;;;;;;;;;;;;;;;;ACJkB;AACc;AAGvD,MAAM,MAAM,GAAW,EAAE,CAAC;AAM1B,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;CAAI;AAApB,gBAAgB;IAJ5B,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;KACxB,CAAC;GACW,gBAAgB,CAAI;AAAJ;;;;;;;;;;;;;;;;;;ACVY;AAMzC,IAAa,YAAY,GAAzB,MAAa,YAAY;IAJzB;QAKE,UAAK,GAAG,QAAQ;IAClB,CAAC;CAAA;AAFY,YAAY;IAJxB,+DAAS,CAAC;QACT,QAAQ,EAAE,UAAU;QACpB,QAAQ,EAAE,sBAAsB;KACjC,CAAC;GACW,YAAY,CAExB;AAFwB;AAGzB,yBAAyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTgC;AACjB;AACe;AACuB;AACvB;AACG;AACF;AACF;AACV;AACF;AAEI;AACS;AAoBvD,IAAa,SAAS,GAAtB,MAAa,SAAS;CAAI;AAAb,SAAS;IAlBrB,8DAAQ,CAAC;QACR,YAAY,EAAE;YACZ,4DAAY,EAAE,sEAAiB;SAChC;QACD,OAAO,EAAE;YACP,uEAAa;YACb,qEAAgB;YAChB,4FAAuB;YACvB,wEAAe;YACf,sEAAc;YACd,oEAAa;YACb,0DAAW;YACX,qCAAqC;YACrC,oEAAgB;SACjB;QACD,SAAS,EAAE,CAAC,wDAAU,CAAC;QACvB,SAAS,EAAE,CAAC,4DAAY,CAAC;KAC1B,CAAC;GACW,SAAS,CAAI;AAAJ;;;;;;;;;;;;;;;;;;;AChCiB;AACG;AAM1C,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;IAI1B,YAAoB,GAAe;QAAf,QAAG,GAAH,GAAG,CAAY;QAFnC,aAAQ,GAAG,EAAE;IAEwB,CAAC;IAEtC,IAAI,CAAC,QAAQ;QACT,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,QAAQ,CAAC;IACnC,CAAC;CACJ;;YAL4B,uDAAU;;AAJ1B,iBAAiB;IAJ7B,+DAAS,CAAE;QACR,QAAQ,EAAE,UAAU;QACpB,iJAAwC;KAC3C,CAAC;GACW,iBAAiB,CAS7B;AAT6B;;;;;;;;;;;;;ACP9B;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<mat-card>\\r\\n    <mat-card-content>\\r\\n        <form>\\r\\n            <mat-form-field>\\r\\n                <input [(ngModel)]=\\\"question.text\\\" name=\\\"question\\\" matInput placeholder=\\\"Question\\\">\\r\\n            </mat-form-field>\\r\\n        </form>\\r\\n    </mat-card-content>\\r\\n    <mat-card-actions>\\r\\n            <button (click)=\\\"post(question)\\\" mat-button>POST</button>\\r\\n    </mat-card-actions>\\r\\n</mat-card>\"","import { Injectable } from '@angular/core'\r\nimport { HttpClient } from '@angular/common/http'\r\n\r\n@Injectable()\r\nexport class ApiService {\r\n    constructor(private http: HttpClient) {}\r\n\r\n\r\n    postQuestion(question){\r\n        this.http.post('http://localhost:13537/api/questions', question).subscribe(res => {\r\n            console.log(res)\r\n        })\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core'\n\n@Component({\n  selector: 'app-root',\n  template: '<question><question>'\n})\nexport class AppComponent {\n  title = 'My App'\n}\n// Changed line 9 for fun","import { BrowserModule } from '@angular/platform-browser'\nimport { NgModule } from '@angular/core'\nimport { HttpClientModule } from '@angular/common/http'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { AppRoutingModule } from './app-routing.module'\nimport { MatButtonModule } from '@angular/material/button'\nimport { MatInputModule } from '@angular/material/input'\nimport { MatCardModule } from '@angular/material/card'\nimport { FormsModule } from '@angular/forms'\nimport { ApiService } from './api.service'\n\nimport { AppComponent } from './app.component'\nimport { QuestionComponent} from './question.component'\n\n@NgModule({\n  declarations: [\n    AppComponent, QuestionComponent\n  ],\n  imports: [\n    BrowserModule, \n    HttpClientModule,\n    BrowserAnimationsModule, \n    MatButtonModule, \n    MatInputModule, \n    MatCardModule, \n    FormsModule,\n    // Not sure about the decorator below\n    AppRoutingModule\n  ],\n  providers: [ApiService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {Component} from '@angular/core'\r\nimport { ApiService } from './api.service'\r\n\r\n@Component ({\r\n    selector: 'question',\r\n    templateUrl: './question.component.html'\r\n})\r\nexport class QuestionComponent {\r\n\r\n    question = {}\r\n\r\n    constructor(private api: ApiService){}\r\n\r\n    post(question) {\r\n        this.api.postQuestion(question)\r\n    }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}